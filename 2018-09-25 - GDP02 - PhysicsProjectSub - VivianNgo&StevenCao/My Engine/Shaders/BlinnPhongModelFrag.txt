#version 450 core

in vec2 fragTexCoord;
in vec3 fragPos;
in vec3 fragNormal;

out vec4 color;

uniform float ambientStr = 0.05f;
uniform vec3 ambientColor = vec3(1.0f, 1.0f, 1.0f);
uniform vec3 lightColor = vec3(1.0f, 1.0f, 1.0f);
uniform vec3 lightPos = vec3(0.0f, 0.0f, 1000.0f);
uniform vec3 rimColor = vec3(1.0f,1.0f,1.0f);

uniform float lightSpecStr = 1.0f;
uniform vec3 camPos = vec3(1.0f,1.0f,1.0f);
uniform float shininess = 64.0f;
uniform sampler2D texture_diffuse1;

void main() {
	
	//Ambient lightning
	vec3 ambient = ambientStr * ambientColor;

	//Light Direction
	vec3 norm = normalize(fragNormal);
	vec3 lightDir = normalize(fragPos - lightPos);

	//Diffuse Coloring
	float diffuseStr = max(dot(norm, -lightDir), 0.0f);
	vec3 diffuse = diffuseStr * lightColor;

	//Specular Highlight
	vec3 negViewDir = normalize(camPos - fragPos);
	vec3 halfwayVec = normalize(-lightDir + negViewDir);
	float spec = pow(max(dot(norm, halfwayVec), 0.0f), shininess);
	vec3 specular = lightSpecStr * spec * lightColor;

	//Rim Lighting
	float rimFactor = 1.0f - dot(norm, negViewDir);
	rimFactor = smoothstep(0.0f,1.0f,rimFactor);
	rimFactor = pow(rimFactor,1.0f);
	vec3 rim = rimFactor * rimColor * lightColor;

	color = vec4((ambient + diffuse + specular + rim), 1.0f) * texture(texture_diffuse1, fragTexCoord);
	
}